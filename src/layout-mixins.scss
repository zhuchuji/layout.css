/*
 * @file layout-mixins.scss
 * @author Chockie Zhu
 * @desc Sass mixins for layout
 */
@import "./layout-vars.scss";

// media query
@mixin respondTo ($media-label, $media-specs: $grid-specs) {
  @if map-has-key($media-specs, $media-label) {
    @media #{map-get($media-specs, $media-label)} {
      @content;
    }
  }
}

@mixin make-container () {
  margin-left: auto;
  margin-right: auto;
  @if $container-padding > 0 {
    padding-left: $container-padding;
    padding-right: $container-padding;
  }
  width: 100%;
}

@mixin set-container-max-width () {
  @each $media-label, $max-width in $container-max-width-specs {
    @include respondTo($media-label) {
      max-width: $max-width;
    }
  }
}

@mixin make-row () {
  display: flex;
  flex-wrap: wrap;

  // flex-direction modifier
  @each $modifier in "vertical" {
    @if $modifier == "vertical" {
      &--#{$modifier} {
        flex-direction: column;
      }
    } @else if $modifier == "horizontal" {
      &--#{$modifier} {
        flex-direction: row;
      }
    }
  }

  // flex-wrap modifier
  @each $modifier in "wrap", "no-wrap" {
    &--#{$modifier} {
      flex-wrap: $modifier;
    }
  }

  // justify-content modifier
  @each $modifier in "start", "center", "end", "between", "around" {
    @if $modifier == 'start' {
      &--justify-#{$modifier} {
        justify-content: flex-start;
      }
    } @else if $modifier == 'center' {
      &--justify-#{$modifier} {
        justify-content: center;
      }
    } @else if $modifier == 'end' {
      &--justify-#{$modifier} {
        justify-content: flex-end;
      }
    } @else if $modifier == 'space-between' {
      &--justify-#{$modifier} {
        justify-content: space-between;
      }
    } @else if $modifier == 'around' {
      &--justify-#{$modifier} {
        justify-content: 'space-around';
      }
    }
  }

  // align-items modifier
  @each $modifier in "start", "center", "end" {
    @if $modifier == "start" {
      &--align-#{$modifier} {
        align-items: flex-start;
      }
    } @else if $modifier == "center" {
      &--align-#{$modifier} {
        align-items: center;
      }
    } @else if $modifier == "end" {
      &--align-#{$modifier} {
        align-items: flex-end;
      }
    }
  }
}

@mixin make-col () {
  flex: 1 1 0;
  max-width: 100%;

  // column auto-fit content
  &-fit {
    flex: 0 0 auto;
    max-width: 100%;
  }

  @for $i from 1 through $col-num {
    &-#{$i} {
      flex: 0 0 $i / ($col-num) * 100%;
      max-width: $i / ($col-num) * 100%;
    }
    &-offset-#{$i} {
      margin-left: $i / ($col-num) * 100%;
    }
    html[lang="ar"] &-offset-#{$i} {
      margin-left: 0;
      margin-right: $i / ($col-num) * 100%;
    }
  }

  // responsive columns
  @each $label, $media in $grid-specs {
    @include respondTo ($label) {
      &-#{$label} {
        flex: 1 1 0;
        max-width: 100%;
      }

      &-#{$label}-fit {
        flex: 0 0 auto;
        max-width: 100%;
      }

      @for $i from 1 through $col-num {
        &-#{$label}-#{$i} {
          flex: 0 0 $i / ($col-num) * 100%;
          max-width: $i / ($col-num) * 100%;
        }
        &-offset-#{$label}-#{$i} {
          margin-left: $i / ($col-num) * 100%;
        }
        html[lang="ar"] &-offset-#{$label}-#{$i} {
          margin-left: 0;
          margin-right: $i / ($col-num) * 100%;
        }
      }
    }
  }
}

@mixin make-hidden () {
  .hidden {
    display: none;

    @each $label, $media in $hidden-specs {
      @include respondTo($label, $hidden-specs) {
        &-#{$label} {
          display: none;
        }
      }
    }
  }
}

@mixin make-margin-padding {
  .m {
    @each $value in $space-values {
      &a-#{$value} {
        margin: #{$value}px;
      }
      &x-#{$value} {
        margin-left: #{$value}px;
        margin-right: #{$value}px;
      }
      &y-#{$value} {
        margin-top: #{$value}px;
        margin-bottom: #{$value}px;
      }
      &t-#{$value} {
        margin-top: #{$value}px;
      }
      &b-#{$value} {
        margin-bottom: #{$value}px;
      }
      &b-#{$value} {
        margin-bottom: #{$value}px;
      }
      &r-#{$value} {
        margin-right: #{$value}px;
      }
    }
  }
  .p {
    @each $value in $space-values {
      &a-#{$value} {
        padding: #{$value}px;
      }
      &x-#{$value} {
        padding-left: #{$value}px;
        padding-right: #{$value}px;
      }
      &y-#{$value} {
        padding-top: #{$value}px;
        padding-bottom: #{$value}px;
      }
      &t-#{$value} {
        padding-top: #{$value}px;
      }
      &b-#{$value} {
        padding-bottom: #{$value}px;
      }
      &b-#{$value} {
        padding-bottom: #{$value}px;
      }
      &r-#{$value} {
        padding-right: #{$value}px;
      }
    }
  }
}
