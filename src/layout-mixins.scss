/*
 * @file layout-mixins.scss
 * @author Chockie Zhu
 * @desc Sass mixins for layout
 */
@import "./layout-vars.scss";

// media query
@mixin respondTo ($media-label, $media-specs: $grid-specs) {
  @if map-has-key($media-specs, $media-label) {
    @media #{map-get($media-specs, $media-label)} {
      @content;
    }
  }
}

@mixin make-container () {
  box-sizing: border-box;
  margin-left: auto;
  margin-right: auto;
  @if $container-padding > 0 {
    padding-left: $container-padding;
    padding-right: $container-padding;
  }
  width: 100%;
}

@mixin set-container-max-width () {
  @each $media-label, $max-width in $container-max-width-specs {
    @include respondTo($media-label) {
      max-width: $max-width;
    }
  }
}

@mixin make-row () {
  display: flex;
  flex-wrap: wrap;
  box-sizing: border-box;

  // flex-direction modifier
  @each $modifier in "vertical" {
    &--#{$modifier} {
      flex-direction: column;
    }
  }

  // flex-wrap modifier
  @each $modifier in "no-wrap" {
    &--#{$modifier} {
      flex-wrap: no-wrap;
    }
  }

  // justify-content modifier
  @each $modifier in "center", "end", "space-between", "space-evenly" {
    @if $modifier == 'center' {
      &--justify-#{$modifier} {
        justify-content: center;
      }
    } @else if $modifier == 'end' {
      &--justify-#{$modifier} {
        justify-content: flex-end;
      }
    } @else if $modifier == 'space-between' {
      &--justify-#{$modifier} {
        justify-content: space-between;
      }
    } @else if $modifier == 'space-evenly' {
      &--justify-#{$modifier} {
        justify-content: space-evenly;
      }
    }
  }

  // align-items modifier
  @each $modifier in "start", "center", "end" {
    @if $modifier == "start" {
      &--align-#{$modifier} {
        align-items: flex-start;
      }
    } @else if $modifier == "center" {
      &--align-#{$modifier} {
        align-items: center;
      }
    } @else if $modifier == "end" {
      &--align-#{$modifier} {
        align-items: flex-end;
      }
    }
  }
}

@mixin make-col () {
  flex: 1 1 0;
  box-sizing: border-box;
  max-width: 100%;
  overflow: auto;

  // column auto-fit content
  &-fit {
    flex: 0 0 auto;
    box-sizing: border-box;
    max-width: none;
  }

  // default mobile columns
  &-0 {
    flex: 0 0 0;
    box-sizing: border-box;
    overflow: hidden;
  }

  @for $i from 1 through $col-num {
    &-#{$i} {
      flex: 0 0 $i / ($col-num) * 100%;
      box-sizing: border-box;
      max-width: 100%;
      overflow: auto;
    }
    &-offset-#{$i} {
      margin-left: $i / ($col-num) * 100%;
    }
    html[lang="ar"] &-offset-#{$i} {
      margin-left: 0;
      margin-right: $i / ($col-num) * 100%;
    }
    // &-push-#{$i} {
    //   position: relative;
    //   left: $i / $col-num * 100%;
    // }
    // &-pull-#{$i} {
    //   position: relative;
    //   right: $i / $col-num * 100%;
    // }
  }

  // responsive columns
  @each $label, $media in $grid-specs {
    @include respondTo ($label) {
      &-#{$label} {
        flex: 1 1 0;
        box-sizing: border-box;
        max-width: 100%;
        overflow: auto;
      }

      &-#{$label}-fit {
        flex: 0 0 auto;
        box-sizing: border-box;
        max-width: none;
      }

      &-#{$label}-0 {
        flex: 0 0 0;
        box-sizing: border-box;
        overflow: hidden;
      }

      @for $i from 1 through $col-num {
        &-#{$label}-#{$i} {
          flex: 0 0 $i / ($col-num) * 100%;
          box-sizing: border-box;
          max-width: 100%;
          overflow: auto;
        }
        &-offset-#{$label}-#{$i} {
          margin-left: $i / ($col-num) * 100%;
        }
        html[lang="ar"] &-offset-#{$label}-#{$i} {
          margin-left: 0;
          margin-right: $i / ($col-num) * 100%;
        }
        // &-push-#{$label}-#{$i} {
        //   position: relative;
        //   left: $i / $col-num * 100%;
        // }
        // &-pull-#{$label}-#{$i} {
        //   position: relative;
        //   right: $i / $col-num * 100%;
        // }
      }
    }
  }
}

@mixin make-hidden () {
  display: none;

  @each $label, $media in $hidden-specs {
    @include respondTo($label, $hidden-specs) {
      &-#{$label} {
        display: none;
      }
    }
  }
}

@mixin make-margin-padding () {
  @each $layout-type in "m", "p" {
    @each $direction in "a", "x", "y", "t", "b", "l", "r" {
      @each $value in "1", "2", "3", "4", "5", "6", "8", "10", "12", "14", "15", "16", "18", "20", "25", "30", "40", "50" {
        .#{$layout-type}#{$direction}-#{$value} {
          margin: $value;
        }
      }
    }
  }
}
