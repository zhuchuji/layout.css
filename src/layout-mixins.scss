/*
 * @file layout-mixins.scss
 * @author Chockie Zhu
 * @desc Sass mixins for layout
 */
@import "./layout-vars.scss";

// media query
@mixin respondTo ($media-label, $media-specs: $grid-specs) {
  @if map-has-key($media-specs, $media-label) {
    @media #{map-get($media-specs, $media-label)} {
      @content;
    }
  }
}

@mixin make-container () {
  margin-left: auto;
  margin-right: auto;
  @if $container-padding > 0 {
    padding-left: $container-padding;
    padding-right: $container-padding;
  }
  width: 100%;
}

@mixin set-container-max-width () {
  @each $media-label, $max-width in $container-max-width-specs {
    @include respondTo($media-label) {
      max-width: $max-width;
    }
  }
}

@mixin make-grid () {
  .flex {
    display: flex;
    flex-wrap: wrap;
  }

  .row {
    flex-direction: row;
  }

  .column {
    flex-direction: column;
  }

  .row.reverse {
    flex-direction: row-reverse;
  }

  .column.reverse {
    flex-direction: column-reverse;
  }

  .wrap {
    flex-wrap: wrap;
  }

  .no-wrap {
    flex-wrap: nowrap;
  }

  .justify-content-start {
    justify-content: flex-start;
  }

  .justify-content-center {
    justify-content: center;
  }

  .justify-content-end {
    justify-content: flex-end;
  }

  .justify-content-between {
    justify-content: space-between;
  }

  .justify-content-around {
    justify-content: space-around;
  }

  .align-items-start {
    align-items: flex-start;
  }

  .align-items-center {
    align-items: center;
  }

  .align-items-end {
    align-items: flex-end;
  }

  @each $label, $media in $grid-specs {
    @include respondTo ($label) {
      // flex grid
      .#{$label} {
        flex: 1 1 0;
        max-width: 100%;
      }

      // auto-fit grid
      .#{$label}-fit {
        flex: 0 0 auto;
        max-width: 100%;
      }

      // fix-length grid in percentage
      @for $i from 1 through $grid-num {
        .#{$label}-#{$i} {
          flex: 0 0 $i / ($grid-num) * 100%;
          max-width: $i / ($grid-num) * 100%;
        }

        .offset-#{$label}-#{$i} {
          margin-left: $i / ($grid-num) * 100%;
        }

        .offset-ar-#{$label}-#{$i} {
          margin-left: 0;
          margin-right: $i / ($grid-num) * 100%;
        }
      }
    }
  }
}

@mixin make-hidden () {
  .hidden {
    display: none;

    @each $modifier, $media in $hidden-specs {
      @include respondTo($modifier, $hidden-specs) {
        &-#{$modifier} {
          display: none;
        }
      }
    }
  }
}

@mixin make-margin-padding {
  @each $type, $property in $space-type {
    .#{$type} {
      @each $value in $space-values {
        $label: $value;
        $spaceValue: $value;
        @if $value == 'auto' {
          $spaceValue: #{$value};
        } @else {
          $spaceValue: #{$value}px;
        }

        &t-#{$label}, &y-#{$label}, &a-#{$label} {
          #{$property}-top: $spaceValue;
        }

        &b-#{$label}, &y-#{$label}, &a-#{$label} {
          #{$property}-bottom: $spaceValue;
        }

        &l-#{$label}, &x-#{$label}, &a-#{$label} {
          #{$property}-left: $spaceValue;
        }

        &r-#{$label}, &x-#{$label}, &a-#{$label} {
          #{$property}-right: $spaceValue;
        }
      }
    }
  }
}
